<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1471949056367">{:repl-history {:ide [], :local [&quot;(ns async-tea-party.core\n  (:require [clojure.core.async\n             :refer [&gt;! &lt;! &gt;!! chan close! go go-loop alts!]]))\n\n\n\n&quot; &quot;(def tea-channel (chan))&quot; &quot;(def tea-channel (chan 10))&quot; &quot;(&gt;!! tea-channel :cup-of-tea)&quot; &quot;tea-channel&quot; &quot;(ns async-tea-party.core\n  (:require [clojure.core.async\n             :refer [&gt;! &lt;! &gt;!! &lt;!! chan close! go go-loop alts!]]))\n\n\n\n&quot; &quot;(&lt;!! tea-channel)&quot; &quot;dsaf&quot; &quot;(ns async-tea-party.core\n  (:require [clojure.core.async\n             :refer [&gt;! &lt;! &gt;!! &lt;!! chan close! go go-loop alts!]]))\n\n\n\n(let [tea-channel (chan)]\n  (go (&gt;! tea-channel :cup-of-tea1))\n  (go (println \&quot;Thanks for the\&quot; (&lt;! tea-channel))))&quot; &quot;(go-loop []\n  (println \&quot;Thanks for the\&quot; (&lt;! tea-channel))\n  (recur))&quot; &quot;(def tea-channel (chan 10))\n\n\n(go-loop []\n  (println \&quot;Thanks for the\&quot; (&lt;! tea-channel))\n  (recur))\n&quot; &quot;(&gt;!! tea-channel :hot-cup-of-tea)&quot; &quot;(&gt;!! tea-channel :hot-cup-of-tea2\n     )&quot; &quot;(&gt;!! tea-channel :hot-cup-of)&quot; &quot;(println \&quot;test\&quot;)&quot; &quot;(def tea-channel (chan 10))\n(def milk-channel (chan 10))\n(def sugar-channel (chan 10))\n\n(go-loop []\n  (let [[v ch] (alts! [tea-channel\n                       milk-channel\n                       sugar-channel])]\n    (println \&quot;Got\&quot; v \&quot;from\&quot; ch)\n    (recur)))\n&quot; &quot;(&gt;!! sugar-channel :sugar)&quot; &quot;(&gt;!! milk-channel :milk)&quot; &quot;(&gt;!! tea-channel :tea)&quot;], :remote []}}</component>
</project>